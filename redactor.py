import json
import urllib
import subprocess
from lxml import etree
from claudia_interpretator import for_one_doc
from claudia_compilator import start_compilator



class claudiaRedactor:
    def __init__(self,  args,  mongo=None):
        #print('args: ' + json.dumps(args,  indent=4))
        
        document = ""
        formula = "<p>Upload a formula from a file.</p>"
        formula_text = urllib.quote(formula)
        for arg in args['data']:
            print('arg: ' + json.dumps(arg,  indent=4))
            data = arg['data']
            if arg['name'] == '"formula"':
#                html = ""
#                for line in data.split('\n'):
#                    html += '<p>' + line + '</p>'
#                formula = html
                formula_text = urllib.quote(data)
            elif arg['name'] == '"formula_reserve"\r':
                formula_text = data
            elif arg['name'] == '"document_text"\r': 
                print('doc_data: ' + arg['data'])
                document = data
                #document= "<textarea id='document_area'  onblur='doc_change();' value='sdf'></textarea>"
            elif arg['name'] == '"document"':
                document = urllib.quote(data)
            else:
                print('Unknown name: ' + arg['name'])
            #print('html: ' + document)
        
        # debugger
        s = "Line 5: Bugs... bugs... bugs..."
        bugs = '<div id="bugs">' + s + '</div>'
        
        #results
        s = "Here results of the formula will be..."
        results = '<div id="f_results">' + s + '</div>'
        
        template_file = open('cci/viewer/redactor.html',  'r')
        template = template_file.read()
        template_file.close()
        template = template.replace('<document_results/>',  results)
        template = template.replace('<debugger/>',  bugs)
#        template = template.replace('<formula/>',  formula)
        template = template.replace('<document/>',  document)
        template = template.replace('<formula_text/>',  formula_text)
        self.site = template
        

class runClaudia():
    def __init__(self,  args, mongo=None):
        formula = args['formula']
        text = args['doc']
        doc = self.generator_of_chunks(text)
        formula_name = "Formula was generated by ClaudiaRedactor. " + "Date: Today."
        code = start_compilator(formula,  formula_name)
        results = 'Diagnose: ' + for_one_doc(doc,  code,  mongo)
        self.site = results

    def generator_of_chunks(self,  text):
#        q = "java -jar /data/projects/Claudia/lib/hsconnector.jar < "
#        file = "/data/bgm/versions/v.0.1.x/anfisa/README.md"
#        p = subprocess.Popen(q + file, stdout=subprocess.PIPE, shell=True)
#        print('generator of chunks: ' + p)
#        return p

        if text[:5] == 'Doc #':
            number_of_card = text[5:]
            try:
                file = open('cci/documents/Doc' + number_of_card + '.html',  'r')
                doc = file.read()
                file.close
            except:
                print("File not found: " + 'cci/documents/Doc' + number_of_card + '.html')
                return 'File not found: cci/documents/Doc' + number_of_card + '.html'
        else:
            doc = text
        
        tmp_file = 'tmp/formula.cla'
        file = open(tmp_file,  'w')
        file.write(doc)
        file.close()
        try:
            with open(tmp_file,  'rb') as inp:
                sHTML_Parser = etree.HTMLParser(remove_comments = True)
                tree = etree.parse(inp, sHTML_Parser)
                nodes = tree.xpath('/html/body/p')
        except IOError:
            print('No such file or directory: ' + tmp_file)
            return
        s_nodes = []
        for node in nodes:
            s_nodes.append(etree.tostring(node))
        return s_nodes
